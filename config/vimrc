" Use foldmethod=marker manage vimrc file.
"
" {{{ NO Plugins

"" {{{ >>> Fold Documentation <<<
" za : open/close fold
" zc : close fold
" zo : open fold
" zr : open all fold
" zR : open all fold and nested fold
" zm : close all fold
" zM : close all fold and nested fold
" zj : move to next fold
" zk : move to prev fold
" zn : on fold
" zN : off fold
" }}}

" {{{ >>> Colors <<<
" no vi-compatible
set nocompatible
" syntax highlight on
syntax on
filetype plugin indent on
" auto change work directory
set autochdir
" no bell
set novisualbell
" }}}

" {{{ >>> Leader Key <<<
let g:mapleader = "\<Space>"
let g:maplocalleader = ','
" Require for all jedi Plugins: jedi, maccabe, flake8, pylint
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'
" quick into command mode
nnoremap ; :
" }}}

" {{{ >>> UI Display <<<
" show line number
set number
" Be convinent for vim command
set relativenumber
" show command in botton bar
set showcmd
" set showtabline=1
" highlight current line
set cursorline
" highlight current column
" set cursorcolumn
" hightlight column maxsize flag
set colorcolumn=100
" set code warning column
highlight ColorColumn ctermbg=6
" softbreak
set linebreak
" visual autocomplete for command menu
set wildmenu
" redraw only when we need to.
set lazyredraw
set history=100
" }}}

" {{{ >>> Fold <<<
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=syntax
set foldlevel=99
au BufRead *.vim set foldmethod=marker
au BufRead vimrc set foldmethod=marker
au BufRead *.py set foldmethod=indent
" method: manual/indent/expr/syntax/diff/marker
" }}}

" {{{ >>> Better Defaults <<<

" save as sudo
ca w!! w !sudo tee "%"
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
" set fileencodings=ucs-bom,utf-8,chinese,cp936
" highlight matching [{()}]
set showmatch
" search as characters are entered
set incsearch
" highlight matches
set hlsearch
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3
" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest,full

" hide toolbar and menu
set guioptions-=T
set guioptions-=m
" not show startup suomali
set shortmess=atI
" not ring
set noerrorbells
set novisualbell

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*,*\.DS_Store
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" thin/long/wide/tree
let g:netrw_liststyle=3
" hide banner
let g:netrw_banner=0
" explore width/editor percent
let g:netrw_winsize=25

set autoread
" share with windows system clipboard
set clipboard+=unnamed
set ignorecase smartcase
" binary not eight num
set nrformats-=octal
set autoindent
set smartindent
set indentexpr=
" let backspace can delete
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" remove ugly vertical lines on window division
set fillchars+=vert:\
" cursor in last left when you open the file.
autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal`\"" | endif

" save undo history even though close vim
set noundofile
set noswapfile
set nobackup
set undodir=~/.undodir
" }}}

" {{{ >>> Movement <<<
" move vertically by visual line, realline <=> visualine
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
" insert-mode move
inoremap <c-f> <right>
inoremap <c-b> <left>
inoremap <c-n> <down>
inoremap <c-p> <up>
inoremap <c-a> <home>
inoremap <c-e> <end>

" ex-mode move
cnoremap <c-f> <right>
cnoremap <c-b> <left>
cnoremap <c-n> <down>
cnoremap <c-p> <up
" jj is escape, <ESC> is very far away. kj is a much better.
" Use <c-[> to instead of kj
"inoremap kj <ESC>

" move to beginning/end of line
" 0 == ^
"nnoremap B ^
"nnoremap E $

" $/^ doesn't do anything
"nnoremap $ <nop>
"nnoremap ^ <nop>
nnoremap zz :q!<CR>
" OFF, because it will trigger `REPLACE MODEL`
"nnoremap <leader>s :w!<CR>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
" }}}

" {{{ >>> Tab Docmentation <<<
" =================================================================================================
" :tabn     :tabnext    -> tab next
" :tabp     :tabprev    -> tab previous
" :tabnew               -> tab new
" :tabonly              -> tab only open
" :tabclose             -> tab close
" :tabs                 -> tab list
" :tab(number)          -> tab number
" gt                    -> tab next
" gT                    -> tab previous

" ===== Buffer =====
" :ls   :buffers    -> buffer list
" :bn               -> buffer next
" :bp               -> buffer previous
" :b(num)           -> buffer number
" :ba   :badd       -> buffer add file
" :bdelete          -> buffer delete


" navigate windows with "leader + window + direction"
" map <leader>wl <c-w>l
" map <leader>wh <c-w>h
" map <leader>wk <c-w>k
" map <leader>wj <c-w>j
" " ???????
" map <leader>w- <c-w>-
" map <leader>w+ <c-w>+
" map <leader>w= <c-w>=
" }}}

" {{{ Windows Manager
map <leader>wo <C-w>w
map <leader>wd <C-w>c
map <leader>w- <C-w>s
map <leader>w\| <C-w>v
" hjkl
map <leader>wj <C-w>j
map <leader>wk <C-w>k
map <leader>wh <C-w>h
map <leader>wl <C-w>l

map <leader>w= <C-w>=
" }}}

" {{{ >>> Space & Tab <<<
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set ruler
" tab length exceptions on some file types
autocmd FileType html setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType htmldjango setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    " clear empty spaces at the end of lines on save of python files
    autocmd BufWritePre *.py :%s/\s\+$//e
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
" }}}

" {{{ >>> Markdown <<<
augroup md
  autocmd!
  au BufNewFile,BufRead *.md syntax keyword TODO FIXIT NOTE
  au BufNewFile,BufRead *.md inoremap <buffer> ;` ```<cr><cr>```<Up><Up>
  au BufNewFile,BufRead *.gohtml set filetype=gohtmltmpl
augroup END
" }}}

" {{{ >>> paste, run <<<
" paste not busy
set nopaste
set pastetoggle=<F10>
" }}}

" }}}


call plug#begin()

Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'voldikss/vim-translator'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

" {{{ translator settings
let g:translator_target_lang='zh'
let g:translator_default_engines=['youdao', 'bing']
" popup, preview
let g:translator_window_type='popup'
" Display translation in a window
nmap <silent> <Leader>d <Plug>TranslateW
vmap <silent> <Leader>d <Plug>TranslateWV
" }}}

" {{{ LeaderF settings
" <C-R> switch between fuzzy search mode and regex mode
" <C-F> switch between full path search mode and name only search mode
" <C-P> preview the result
" TODO: gtags
" NOTE: use c-k, c-j
"let g:Lf_CommandMap = {'<C-K>': ['<Up>'], '<C-J>': ['<Down>']}
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 1, 'BufTag': 0 }
let g:Lf_WildIgnore = {
    \ 'dir': ['__pycache__', '.git', 'venv', 'dist', 'build', '.idea',
    \'.vscode', '.svn', '.hg'],
    \ 'file': ['*.db', '*.sqlite', '*.exe', '*.o', '*.so', '*.py[co]', '*.bak', '*.log']
    \}
let g:Lf_MruFileExclude = ['*.db', '*.sqlite', '*.exe', '*.o', '*.so', '*.py[co]', '*.bak', '*.log']


let g:Lf_ShortcutF = "<leader>f"
let g:Lf_ShortcutB = "<leader>b"
noremap <leader>i :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>; :<C-U><C-R>=printf("Leaderf command %s", "")<CR><CR>
noremap <leader>/ :<C-U><C-R>=printf("Leaderf rg --current-buffer %s", "")<CR><CR>
noremap <leader>r :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>q :<C-U><C-R>=printf("Leaderf! quickfix %s", "")<CR><CR>
noremap <leader>l :<C-U><C-R>=printf("Leaderf! loclist %s", "")<CR><CR>

noremap <leader>s :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
"noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
" }}}

" {{{ go language
autocmd FileType go setlocal shiftwidth=4 tabstop=8 softtabstop=8
augroup go
    autocmd!
    autocmd FileType go setlocal commentstring=//\ %s
    autocmd BufEnter Makefile setlocal noexpandtab

    au FileType go nmap <leader>gr <Plug>(go-rename)
    au FileType go nmap <leader>gt :GoAddTags json
    au FileType go nmap <leader>gT :GoRemoveTags 
    au FileType go nmap <leader>gf <Plug>(go-fmt)
    au FileType go nmap <leader>gi <Plug>(go-imports)
    " not work well
    "au FileType go nmap <leader>gI <Plug>(go-implements)
    au FileType go nmap <leader>gl <Plug>(go-lint)
    au FileType go nmap <leader>ge <Plug>(go-diagnostics)
    " go-rename
augroup END

" 'gd' go to defination
let g:go_fmt_autosave = 1
" gopls, gofmt, goimports
let g:go_fmt_command = 'gopls'
let g:go_imports_autosave = 1
" 'K' | :GoDoc is show doc
let g:go_doc_popup_window = 1
" struct tags format
let g:go_addtags_transform = 'snakecase'
" ':GoRun' reuse terminal
let g:go_term_reuse = 1

" }}}
" {{{ coc.nvim

" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

" navigate next, last completion list
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
" CR make sure
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" }}}

" {{{
colorscheme dracula
if has('gui_running') || (&term =~? 'mlterm\|xterm\|xterm-256\|screen-256')
    if !has('gui_running')
        let &t_Co = 256
    endif
endif
" }}}
